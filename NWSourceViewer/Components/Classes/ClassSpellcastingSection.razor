<h2>Spellcasting</h2>

@if (Class.ClassModel.SpellKnownTable != Constants.NullString)
{
    <h3>Spells Known</h3>
    <RadzenDataGrid Data="Class.ClassLevels" class="unfixed-table-holder">
        <Columns>
            <RadzenDataGridColumn TItem="ClassLevelModel" Property="Level" Title="Level" />
            <RadzenDataGridColumn TItem="ClassLevelModel" Title="Cantrips " Visible="ShowKnown0">
                <Template Context="data">
                    @data.SpellsKnown?.SpellLevel0
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ClassLevelModel" Title="1st" Visible="ShowKnown1">
                <Template Context="data">
                    @data.SpellsKnown?.SpellLevel1
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ClassLevelModel" Title="2nd" Visible="ShowKnown2">
                <Template Context="data">
                    @data.SpellsKnown?.SpellLevel2
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ClassLevelModel" Title="3rd" Visible="ShowKnown3">
                <Template Context="data">
                    @data.SpellsKnown?.SpellLevel3
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ClassLevelModel" Title="4th" Visible="ShowKnown4">
                <Template Context="data">
                    @data.SpellsKnown?.SpellLevel4
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ClassLevelModel" Title="5th" Visible="ShowKnown5">
                <Template Context="data">
                    @data.SpellsKnown?.SpellLevel5
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ClassLevelModel" Title="6th" Visible="ShowKnown6">
                <Template Context="data">
                    @data.SpellsKnown?.SpellLevel6
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ClassLevelModel" Title="7th" Visible="ShowKnown7">
                <Template Context="data">
                    @data.SpellsKnown?.SpellLevel7
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ClassLevelModel" Title="8th" Visible="ShowKnown8">
                <Template Context="data">
                    @data.SpellsKnown?.SpellLevel8
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ClassLevelModel" Title="9th" Visible="ShowKnown9">
                <Template Context="data">
                    @data.SpellsKnown?.SpellLevel9
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
@if (Class.ClassModel.SpellGainTable != Constants.NullString)
{
    <h3>Spell Slots</h3>
    <RadzenDataGrid Data="Class.ClassLevels" class="unfixed-table-holder">
        <Columns>
            <RadzenDataGridColumn TItem="ClassLevelModel" Property="Level" Title="Level" />
            <RadzenDataGridColumn TItem="ClassLevelModel" Title="Cantrips " Visible="ShowGain0">
                <Template Context="data">
                    @data.SpellsGained?.SpellLevel0
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ClassLevelModel" Title="1st" Visible="ShowGain1">
                <Template Context="data">
                    @data.SpellsGained?.SpellLevel1
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ClassLevelModel" Title="2nd" Visible="ShowGain2">
                <Template Context="data">
                    @data.SpellsGained?.SpellLevel2
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ClassLevelModel" Title="3rd" Visible="ShowGain3">
                <Template Context="data">
                    @data.SpellsGained?.SpellLevel3
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ClassLevelModel" Title="4th" Visible="ShowGain4">
                <Template Context="data">
                    @data.SpellsGained?.SpellLevel4
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ClassLevelModel" Title="5th" Visible="ShowGain5">
                <Template Context="data">
                    @data.SpellsGained?.SpellLevel5
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ClassLevelModel" Title="6th" Visible="ShowGain6">
                <Template Context="data">
                    @data.SpellsGained?.SpellLevel6
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ClassLevelModel" Title="7th" Visible="ShowGain7">
                <Template Context="data">
                    @data.SpellsGained?.SpellLevel7
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ClassLevelModel" Title="8th" Visible="ShowGain8">
                <Template Context="data">
                    @data.SpellsGained?.SpellLevel8
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ClassLevelModel" Title="9th" Visible="ShowGain9">
                <Template Context="data">
                    @data.SpellsGained?.SpellLevel9
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
@if (Class.SpellLists.Count > 0)
{
    <h3>Spells available</h3>
    <div class="container">
        @foreach (var spellLevelList in Class.SpellLists)
        {
           <div class="row">
               <div class="col">
                   Level @spellLevelList.Key
                </div>
                <div class="col">
                    <CommaLinkList LinkList="@spellLevelList.Value.Select(f => new KeyValuePair<string, string>(f.NameString, $"/spells/{f.Index}")).ToList()" />
                </div>
           </div>
        }
    </div>
}

@code {
    [Parameter, EditorRequired]
    public FullClassModel Class { get; set; } = default!;

    private bool ShowKnown0 => Class.ClassLevels.Any(cl => cl.SpellsKnown?.SpellLevel0 != null);
    private bool ShowKnown1 => Class.ClassLevels.Any(cl => cl.SpellsKnown?.SpellLevel1 != null);
    private bool ShowKnown2 => Class.ClassLevels.Any(cl => cl.SpellsKnown?.SpellLevel2 != null);
    private bool ShowKnown3 => Class.ClassLevels.Any(cl => cl.SpellsKnown?.SpellLevel3 != null);
    private bool ShowKnown4 => Class.ClassLevels.Any(cl => cl.SpellsKnown?.SpellLevel4 != null);
    private bool ShowKnown5 => Class.ClassLevels.Any(cl => cl.SpellsKnown?.SpellLevel5 != null);
    private bool ShowKnown6 => Class.ClassLevels.Any(cl => cl.SpellsKnown?.SpellLevel6 != null);
    private bool ShowKnown7 => Class.ClassLevels.Any(cl => cl.SpellsKnown?.SpellLevel7 != null);
    private bool ShowKnown8 => Class.ClassLevels.Any(cl => cl.SpellsKnown?.SpellLevel8 != null);
    private bool ShowKnown9 => Class.ClassLevels.Any(cl => cl.SpellsKnown?.SpellLevel9 != null);

    private bool ShowGain0 => Class.ClassLevels.Any(cl => cl.SpellsGained?.SpellLevel0 != null);
    private bool ShowGain1 => Class.ClassLevels.Any(cl => cl.SpellsGained?.SpellLevel1 != null);
    private bool ShowGain2 => Class.ClassLevels.Any(cl => cl.SpellsGained?.SpellLevel2 != null);
    private bool ShowGain3 => Class.ClassLevels.Any(cl => cl.SpellsGained?.SpellLevel3 != null);
    private bool ShowGain4 => Class.ClassLevels.Any(cl => cl.SpellsGained?.SpellLevel4 != null);
    private bool ShowGain5 => Class.ClassLevels.Any(cl => cl.SpellsGained?.SpellLevel5 != null);
    private bool ShowGain6 => Class.ClassLevels.Any(cl => cl.SpellsGained?.SpellLevel6 != null);
    private bool ShowGain7 => Class.ClassLevels.Any(cl => cl.SpellsGained?.SpellLevel7 != null);
    private bool ShowGain8 => Class.ClassLevels.Any(cl => cl.SpellsGained?.SpellLevel8 != null);
    private bool ShowGain9 => Class.ClassLevels.Any(cl => cl.SpellsGained?.SpellLevel9 != null);
}
